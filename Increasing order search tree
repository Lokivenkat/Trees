897. Increasing Order Search Tree
Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

Example 1:
https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

sol:
class Solution:
    def increasingBST(self, root: TreeNode) -> TreeNode:
        def inorder(self,root,l):
            if root is not None:
                inorder(self,root.left,l)
                l.append(root.val)
                inorder(self,root.right,l)
            return(l)
        def insert(self,root,data):
            q=[]
            q.append(root)
            while(len(q)):
                root=q[0]
                q.pop(0)
                if(root.right==None):
                    root.right=TreeNode(data)
                    break
                else:
                    q.append(root.right)
            
        l=[]
        inorder(self,root,l)
        temp=TreeNode()
        temp=TreeNode(l[0])
        for i in range(1,len(l)):
            insert(self,temp,l[i])
        return(temp)
        
